{\rtf1\ansi\ansicpg1252\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 #include <Wire.h>\
#include <MPU6050.h>  // Include the MPU6050 library\
#include <LiquidCrystal.h>  // Include the LCD library\
\
// Motor Pins\
const int motorPin1 = 5;   // Motor IN1 (PWM Pin)\
const int motorPin2 = 6;   // Motor IN2 (PWM Pin)\
\
// Encoder Pins\
const int encoderC1 = 2;   // Encoder Channel A (Interrupt Pin)\
const int encoderC2 = 3;   // Encoder Channel B\
\
// Encoder Variables\
volatile int pulseCount = 0;  // Pulse count\
const int PPR = 204;          // Pulses per revolution (adjust to your encoder specs)\
\
// Constants\
const int motorSpeed = 75;    // Motor speed (PWM value)\
const int tolerance = 5;      // Tolerance for stopping the motor\
\
// Motor State\
bool motorRunning = true;\
\
// LCD Setup (Adjust the pins as needed)\
LiquidCrystal lcd(12, 13, 8, 9, 10, 11);  // RS, Enable, D4, D5, D6, D7\
\
// MPU6050 Setup\
MPU6050 mpu;  // Create an instance of the MPU6050 sensor\
\
// Target angle will be based on the MPU6050 reading\
float targetAngle = 0.0;\
\
void setup() \{\
  // Motor pins setup\
  pinMode(motorPin1, OUTPUT);\
  pinMode(motorPin2, OUTPUT);\
\
  // Encoder pins setup\
  pinMode(encoderC1, INPUT_PULLUP);\
  pinMode(encoderC2, INPUT_PULLUP);\
\
  // Attach interrupt for encoder pulse counting\
  attachInterrupt(digitalPinToInterrupt(encoderC1), countPulses, RISING);\
\
  // Initialize Serial Monitor for debugging\
  Serial.begin(9600);\
  Serial.println("System Initialized. Motor will move to match PPR...");\
\
  // Initialize LCD\
  lcd.begin(16, 2);  // Set the LCD to 16 columns and 2 rows\
  lcd.print("Initializing...");\
  delay(2000);  // Delay for LCD initialization\
  lcd.clear();\
\
  // Start the motor\
  moveMotor(true, motorSpeed); // Start motor moving forward\
\
  // Initialize MPU6050 sensor\
  mpu.initialize();\
  if (mpu.testConnection()) \{\
    Serial.println("MPU6050 is connected.");\
  \} else \{\
    Serial.println("MPU6050 connection failed.");\
  \}\
\}\
\
void loop() \{\
  // Get the current angle from the MPU6050\
  float currentAngle = getMPU6050Angle();\
\
  // Set the target angle based on the MPU6050 reading\
  targetAngle = currentAngle;\
\
  // Calculate the angle from encoder pulses\
  float encoderAngle = calculateEncoderAngle();\
\
  // Display the angle on the LCD\
  lcd.setCursor(0, 0);  // Set cursor to the beginning of the first row\
  lcd.print("Angle: ");\
  lcd.print(encoderAngle);\
  lcd.print(" deg");\
\
  // Print the angle on the Serial Monitor\
  Serial.print("Encoder Angle: ");\
  Serial.print(encoderAngle);\
  Serial.print(" | Target Angle: ");\
  Serial.println(targetAngle);\
\
  // Check if the motor needs to stop\
  if (motorRunning && abs(encoderAngle - targetAngle) <= tolerance) \{\
    stopMotor();\
    motorRunning = false;\
\
    Serial.println("Target angle reached!");\
    Serial.print("Final Pulse Count: ");\
    Serial.println(pulseCount);\
  \}\
\
  // Adjust motor direction if necessary\
  if (encoderAngle < targetAngle - tolerance) \{\
    moveMotor(true, motorSpeed); // Move forward\
  \} else if (encoderAngle > targetAngle + tolerance) \{\
    moveMotor(false, motorSpeed); // Move backward\
  \} else \{\
    stopMotor(); // Stop if within tolerance\
  \}\
\
  // Read and display MPU6050 data\
  lcd.setCursor(0, 1);\
  lcd.print("MPU Angle: ");\
  lcd.print(currentAngle);\
  lcd.print(" deg");\
\
  // Print debug information\
  Serial.print("Pulse Count: ");\
  Serial.print(pulseCount);\
  Serial.print(" | Error: ");\
  Serial.println(targetAngle - encoderAngle);\
\
  delay(100); // Small delay for stability\
\}\
\
// Interrupt Service Routine (ISR) to count encoder pulses\
void countPulses() \{\
  int stateC2 = digitalRead(encoderC2);\
\
  // Check direction of rotation\
  if (stateC2 == LOW) \{\
    pulseCount++; // Forward rotation\
  \} else \{\
    pulseCount--; // Backward rotation\
  \}\
\}\
\
// Function to calculate the angle from encoder pulses\
float calculateEncoderAngle() \{\
  return (float)pulseCount / PPR * 360.0; // Convert pulses to degrees\
\}\
\
// Function to move motor forward/backward\
void moveMotor(bool forward, int speed) \{\
  if (forward) \{\
    analogWrite(motorPin1, speed);\
    analogWrite(motorPin2, 0);\
  \} else \{\
    analogWrite(motorPin1, 0);\
    analogWrite(motorPin2, speed);\
  \}\
\}\
\
// Function to stop the motor\
void stopMotor() \{\
  analogWrite(motorPin1, 0);\
  analogWrite(motorPin2, 0);\
\}\
\
// Function to get the MPU6050 angle (pitch)\
float getMPU6050Angle() \{\
  // Declare variables to hold acceleration values\
  int ax, ay, az;\
  \
  // Get the acceleration values from the MPU6050\
  mpu.getAcceleration(&ax, &ay, &az);\
\
  // Calculate the pitch angle using the accelerometer data\
  float angle = atan2(ay, az) * 180.0 / PI;\
  \
  return angle;\
\}}